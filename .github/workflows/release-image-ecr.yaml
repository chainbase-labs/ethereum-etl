name: release-image-ECR

on:
  push:
    branches:
      - chainbase
    tags:
      - "*"


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      # Publish to AWS ECR
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ethereum-etl
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://${{ secrets.ALI_LOGIN_SERVER }}
          region-id: ${{ secrets.ALI_REGION_ID }}
          access-key-id: ${{ secrets.ALI_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.ALI_ACCESS_KEY_SECRET }}
          instance-id: ${{ secrets.ALI_INSTANCE_ID }}

      - name: Build and push to AliCloud
        env:
          ECR_REGISTRY: ${{ secrets.ALI_LOGIN_SERVER }}/${{ secrets.ALI_REGISTRY }}
          ECR_REPOSITORY: ethereum-etl
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG